var _immutable=require("immutable");var _cursor=_interopRequireDefault(require("../cursor"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}describe('Cursor',function(){var json={a:{b:{c:1}}};it('gets from its path',function(){var data=(0,_immutable.fromJS)(json);var cursor=_cursor.default.from(data);expect(cursor.deref()).toBe(data);var deepCursor=cursor.cursor(['a','b']);expect(deepCursor.deref().toJS()).toEqual(json.a.b);expect(deepCursor.deref()).toBe(data.getIn(['a','b']));expect(deepCursor.get('c')).toBe(1);var leafCursor=deepCursor.cursor('c');expect(leafCursor).toBe(1);var missCursor=deepCursor.cursor('d');expect(missCursor).toBe(undefined);});it('gets return new cursors',function(){var data=(0,_immutable.fromJS)(json);var cursor=_cursor.default.from(data);var deepCursor=cursor.getIn(['a','b']);expect(deepCursor.deref()).toBe(data.getIn(['a','b']));});it('gets return new cursors using List',function(){var data=(0,_immutable.fromJS)(json);var cursor=_cursor.default.from(data);var deepCursor=cursor.getIn((0,_immutable.fromJS)(['a','b']));expect(deepCursor.deref()).toBe(data.getIn((0,_immutable.fromJS)(['a','b'])));});it('cursor return new cursors of correct type',function(){var data=(0,_immutable.fromJS)({a:[1,2,3]});var cursor=_cursor.default.from(data);var deepCursor=cursor.cursor('a');expect(deepCursor.findIndex).toBeDefined();});it('can be treated as a value',function(){var data=(0,_immutable.fromJS)(json);var cursor=_cursor.default.from(data,['a','b']);expect(cursor.toJS()).toEqual(json.a.b);expect(cursor).toValueEqual(data.getIn(['a','b']));expect(cursor.size).toBe(1);expect(cursor.get('c')).toBe(1);});it('returns the actual value if the position is not a collection',function(){var data=(0,_immutable.Map)({a:'A'});var aCursor=_cursor.default.from(data,'a');expect(aCursor).toBe('A');});it('updates at its path',function(){var data=(0,_immutable.fromJS)(json);var aCursor=_cursor.default.from(data,'a');var deepCursor=aCursor.cursor(['b']);expect(deepCursor.deref()).toValueEqual((0,_immutable.fromJS)({c:1}));var newDeepCursor=deepCursor.update(function(x){return 2;});expect(newDeepCursor).toBe(2);expect(data.toJS()).toEqual(json);});it('has map API for update shorthand',function(){var data=(0,_immutable.fromJS)(json);var aCursor=_cursor.default.from(data,'a');var bCursor=aCursor.cursor('b');var cCursor=bCursor.cursor('c');expect(bCursor.set('c',10).deref()).toValueEqual((0,_immutable.fromJS)({c:10}));});it('returns undefined if there is nothing under the path',function(){var data=(0,_immutable.Map)();var cursor=_cursor.default.from(data,['a','b','c']);expect(cursor).toBeUndefined();});it('has the sequence API',function(){var data=(0,_immutable.Map)({a:1,b:2,c:3});var cursor=_cursor.default.from(data);expect(cursor.map(function(x){return x*x;})).toValueEqual((0,_immutable.Map)({a:1,b:4,c:9}));});it('can push values on a List',function(){var data=(0,_immutable.fromJS)({a:{b:[0,1,2]}});var cursor=_cursor.default.from(data,['a','b']);expect(cursor.push(3,4)).toValueEqual((0,_immutable.List)([0,1,2,3,4]));});it('can pop values of a List',function(){var data=(0,_immutable.fromJS)({a:{b:[0,1,2]}});var cursor=_cursor.default.from(data,['a','b']);expect(cursor.pop()).toValueEqual((0,_immutable.List)([0,1]));});it('can unshift values on a List',function(){var data=(0,_immutable.fromJS)({a:{b:[0,1,2]}});var cursor=_cursor.default.from(data,['a','b']);expect(cursor.unshift(-2,-1)).toValueEqual((0,_immutable.List)([-2,-1,0,1,2]));});it('can shift values of a List',function(){var data=(0,_immutable.fromJS)({a:{b:[0,1,2]}});var cursor=_cursor.default.from(data,['a','b']);expect(cursor.shift()).toValueEqual((0,_immutable.List)([1,2]));});it('returns wrapped values for sequence API',function(){var data=(0,_immutable.fromJS)({a:{v:1},b:{v:2},c:{v:3}});var cursor=_cursor.default.from(data);var found=cursor.find(function(map){return map.get('v')===2;});expect(typeof found.deref).toBe('function');});it('returns wrapped values for iteration API',function(){var jsData=[{val:0},{val:1},{val:2}];var data=(0,_immutable.fromJS)(jsData);var cursor=_cursor.default.from(data);cursor.forEach(function(c,i){expect(typeof c.deref).toBe('function');expect(c.get('val')).toBe(i);});});it('can map over values to get subcursors',function(){var data=(0,_immutable.fromJS)({a:{v:1},b:{v:2},c:{v:3}});var cursor=_cursor.default.from(data);var mapped=cursor.map(function(val){expect(typeof val.deref).toBe('function');return val;}).toMap();expect(typeof mapped.deref).not.toBe('function');expect(typeof mapped.get('a').deref).toBe('function');var data2=(0,_immutable.fromJS)({x:[{v:1},{v:2},{v:3}]});var cursor2=_cursor.default.from(data2);var mapped2=cursor2.get('x').map(function(val){expect(typeof val.deref).toBe('function');return val;}).toList();expect(typeof mapped2.deref).not.toBe('function');expect(typeof mapped2.get(0).deref).toBe('function');});it('can have mutations apply with a single callback',function(){var data=(0,_immutable.fromJS)({a:1});var c1=_cursor.default.from(data);var c2=c1.withMutations(function(m){return m.set('b',2).set('c',3).set('d',4);});expect(c1.deref().toObject()).toEqual({a:1});expect(c2.deref().toObject()).toEqual({a:1,b:2,c:3,d:4});});it('maintains indexed sequences',function(){var data=(0,_immutable.fromJS)([]);var c=_cursor.default.from(data);expect(c.toJS()).toEqual([]);});it('properly acts as an iterable',function(){var data=(0,_immutable.fromJS)({key:{val:1}});var c=_cursor.default.from(data).values();var c1=c.next().value.get('val');expect(c1).toBe(1);});it('can update deeply',function(){var data=(0,_immutable.fromJS)({a:{b:{c:1}}});var c=_cursor.default.from(data,['a']);var c1=c.updateIn(['b','c'],function(x){return x*10;});expect(c1.getIn(['b','c'])).toBe(10);});it('can set deeply',function(){var data=(0,_immutable.fromJS)({a:{b:{c:1}}});var c=_cursor.default.from(data,['a']);var c1=c.setIn(['b','c'],10);expect(c1.getIn(['b','c'])).toBe(10);});it('can get Record value as a property',function(){var User=(0,_immutable.Record)({name:'John'});var users=_immutable.List.of(new User());var data=(0,_immutable.Map)({users:users});var cursor=_cursor.default.from(data,['users']);expect(cursor.first().name).toBe('John');});});